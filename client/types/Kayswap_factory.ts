/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface Kayswap_factoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "estimatePos"
      | "exchangeKlayPos"
      | "exchangeKctPos"
      | "name"
      | "totalSupply"
      | "decimals"
      | "teamWallet"
      | "getExchangeImplementation"
      | "implementation"
      | "nextOwner"
      | "balanceOf"
      | "_setExchangeImplementation"
      | "halfLife"
      | "miningAmount"
      | "poolExist"
      | "owner"
      | "teamAward"
      | "symbol"
      | "teamRatio"
      | "pools"
      | "createFee"
      | "_setImplementation"
      | "unfreezeBlock"
      | "exchangeImplementation"
      | "allowance"
      | "minableBlock"
      | "tokenToPool"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Transfer" | "Approval"): EventFragment;

  encodeFunctionData(
    functionFragment: "estimatePos",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeKlayPos",
    values: [AddressLike, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeKctPos",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setExchangeImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "halfLife", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolExist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamAward", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamRatio", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "createFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_setImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minableBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToPool",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimatePos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeKlayPos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeKctPos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setExchangeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "halfLife", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolExist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamAward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minableBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToPool",
    data: BytesLike
  ): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    holder: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [holder: string, spender: string, amount: bigint];
  export interface OutputObject {
    holder: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Kayswap_factory extends BaseContract {
  connect(runner?: ContractRunner | null): Kayswap_factory;
  waitForDeployment(): Promise<this>;

  interface: Kayswap_factoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  estimatePos: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  exchangeKlayPos: TypedContractMethod<
    [tokenOut: AddressLike, amountOut: BigNumberish, path: AddressLike[]],
    [bigint],
    "payable"
  >;

  exchangeKctPos: TypedContractMethod<
    [
      tokenA: AddressLike,
      amountA: BigNumberish,
      tokenB: AddressLike,
      amountB: BigNumberish,
      path: AddressLike[]
    ],
    [bigint],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  teamWallet: TypedContractMethod<[], [string], "view">;

  getExchangeImplementation: TypedContractMethod<[], [string], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  nextOwner: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  _setExchangeImplementation: TypedContractMethod<
    [_newExImp: AddressLike],
    [void],
    "nonpayable"
  >;

  halfLife: TypedContractMethod<[], [bigint], "view">;

  miningAmount: TypedContractMethod<[], [bigint], "view">;

  poolExist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  teamAward: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  teamRatio: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createFee: TypedContractMethod<[], [bigint], "view">;

  _setImplementation: TypedContractMethod<
    [_newImp: AddressLike],
    [void],
    "nonpayable"
  >;

  unfreezeBlock: TypedContractMethod<[], [bigint], "view">;

  exchangeImplementation: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  minableBlock: TypedContractMethod<[], [bigint], "view">;

  tokenToPool: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "estimatePos"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exchangeKlayPos"
  ): TypedContractMethod<
    [tokenOut: AddressLike, amountOut: BigNumberish, path: AddressLike[]],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchangeKctPos"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      amountA: BigNumberish,
      tokenB: AddressLike,
      amountB: BigNumberish,
      path: AddressLike[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExchangeImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_setExchangeImplementation"
  ): TypedContractMethod<[_newExImp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "halfLife"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "miningAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolExist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamAward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_setImplementation"
  ): TypedContractMethod<[_newImp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unfreezeBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "minableBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenToPool"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
  };
}
