/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Swap {
  export type SwapAmountParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    amount: BigNumberish;
    minAcquired: BigNumberish;
    deadline: BigNumberish;
  };

  export type SwapAmountParamsStructOutput = [
    path: string,
    recipient: string,
    amount: bigint,
    minAcquired: bigint,
    deadline: bigint
  ] & {
    path: string;
    recipient: string;
    amount: bigint;
    minAcquired: bigint;
    deadline: bigint;
  };

  export type SwapDesireParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    desire: BigNumberish;
    maxPayed: BigNumberish;
    deadline: BigNumberish;
  };

  export type SwapDesireParamsStructOutput = [
    path: string,
    recipient: string,
    desire: bigint,
    maxPayed: bigint,
    deadline: bigint
  ] & {
    path: string;
    recipient: string;
    desire: bigint;
    maxPayed: bigint;
    deadline: bigint;
  };

  export type SwapParamsStruct = {
    tokenX: AddressLike;
    tokenY: AddressLike;
    fee: BigNumberish;
    boundaryPt: BigNumberish;
    recipient: AddressLike;
    amount: BigNumberish;
    maxPayed: BigNumberish;
    minAcquired: BigNumberish;
    deadline: BigNumberish;
  };

  export type SwapParamsStructOutput = [
    tokenX: string,
    tokenY: string,
    fee: bigint,
    boundaryPt: bigint,
    recipient: string,
    amount: bigint,
    maxPayed: bigint,
    minAcquired: bigint,
    deadline: bigint
  ] & {
    tokenX: string;
    tokenY: string;
    fee: bigint;
    boundaryPt: bigint;
    recipient: string;
    amount: bigint;
    maxPayed: bigint;
    minAcquired: bigint;
    deadline: bigint;
  };
}

export interface IMerlinSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH9"
      | "factory"
      | "multicall"
      | "pool"
      | "refundETH"
      | "swapAmount"
      | "swapDesire"
      | "swapX2Y"
      | "swapX2YCallback"
      | "swapX2YDesireY"
      | "swapY2X"
      | "swapY2XCallback"
      | "swapY2XDesireX"
      | "sweepToken"
      | "unwrapWETH9"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pool",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapAmount",
    values: [Swap.SwapAmountParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapDesire",
    values: [Swap.SwapDesireParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapX2Y",
    values: [Swap.SwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapX2YCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapX2YDesireY",
    values: [Swap.SwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapY2X",
    values: [Swap.SwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapY2XCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapY2XDesireX",
    values: [Swap.SwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapDesire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapX2Y", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapX2YCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapX2YDesireY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapY2X", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapY2XCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapY2XDesireX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9",
    data: BytesLike
  ): Result;
}

export interface IMerlinSwap extends BaseContract {
  connect(runner?: ContractRunner | null): IMerlinSwap;
  waitForDeployment(): Promise<this>;

  interface: IMerlinSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WETH9: TypedContractMethod<[], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;

  pool: TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike, fee: BigNumberish],
    [string],
    "view"
  >;

  refundETH: TypedContractMethod<[], [void], "payable">;

  swapAmount: TypedContractMethod<
    [params: Swap.SwapAmountParamsStruct],
    [[bigint, bigint] & { cost: bigint; acquire: bigint }],
    "payable"
  >;

  swapDesire: TypedContractMethod<
    [params: Swap.SwapDesireParamsStruct],
    [[bigint, bigint] & { cost: bigint; acquire: bigint }],
    "payable"
  >;

  swapX2Y: TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;

  swapX2YCallback: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  swapX2YDesireY: TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;

  swapY2X: TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;

  swapY2XCallback: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  swapY2XDesireX: TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;

  sweepToken: TypedContractMethod<
    [token: AddressLike, minAmount: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  unwrapWETH9: TypedContractMethod<
    [minAmount: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WETH9"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike, fee: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "refundETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "swapAmount"
  ): TypedContractMethod<
    [params: Swap.SwapAmountParamsStruct],
    [[bigint, bigint] & { cost: bigint; acquire: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapDesire"
  ): TypedContractMethod<
    [params: Swap.SwapDesireParamsStruct],
    [[bigint, bigint] & { cost: bigint; acquire: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapX2Y"
  ): TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapX2YCallback"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapX2YDesireY"
  ): TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapY2X"
  ): TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapY2XCallback"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapY2XDesireX"
  ): TypedContractMethod<
    [swapParams: Swap.SwapParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sweepToken"
  ): TypedContractMethod<
    [token: AddressLike, minAmount: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unwrapWETH9"
  ): TypedContractMethod<
    [minAmount: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  filters: {};
}
